--- printf.ml.orig	2010-01-13 19:44:19.000000000 -0500
+++ printf.ml	2010-01-13 19:49:46.000000000 -0500
@@ -1,3 +1,23 @@
+(*
+ * This file is part of ocamljs, OCaml to Javascript compiler
+ * Copyright (C) 2007-9 Skydeck, Inc
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the Free
+ * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
+ * MA 02111-1307, USA
+ *)
+
 (***********************************************************************)
 (*                                                                     *)
 (*                           Objective Caml                            *)
@@ -509,10 +529,10 @@
       let s =
         if conv = 'c' then String.make 1 x else "'" ^ Char.escaped x ^ "'" in
       cont_s (next_index spec n) s (succ i)
-    | 'd' | 'i' | 'o' | 'u' | 'x' | 'X' | 'N' as conv ->
+    | 'd' | 'i' | 'o' | 'u' | 'x' | 'X' | 'N' ->
       let (x : int) = get_arg spec n in
       let s =
-        format_int (extract_format_int conv fmt pos i widths) x in
+        format_int (extract_format fmt pos i widths) x in
       cont_s (next_index spec n) s (succ i)
     | 'f' | 'e' | 'E' | 'g' | 'G' ->
       let (x : float) = get_arg spec n in
@@ -556,7 +576,7 @@
         cont_s (next_index spec n) s (succ i)
       | _ ->
         let (x : int) = get_arg spec n in
-        let s = format_int (extract_format_int 'n' fmt pos i widths) x in
+        let s = format_int (extract_format fmt pos i widths) x in
         cont_s (next_index spec n) s (succ i)
       end
     | ',' -> cont_s n "" (succ i)
